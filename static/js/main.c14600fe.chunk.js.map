{"version":3,"sources":["board.js","generate.js","BaseChangePuzzle.js","index.js"],"names":["Board","width","htmlOfNums","correctPlaces","Object","classCallCheck","this","Error","htmlForSquares","BEST_POSSIBLE","length","correct","board","guesses","console","log","i","board_row","guesses_row","htmlForSquares_row","j","found","n","push","x","y","checkCont","guess","map","row","rowInd","cell","cellInd","reduce","a","b","concat","filter","arr","some","val","genrandom","answer","op2","base1","Math","floor","random","base2","num1","num2","operation","disp1","toString","disp2","fourRandomMembers","getRandomSubarray","createAnswer2","gensols","genwsols","title","result","base","size","temp","index","shuffled","slice","__html","BaseChangePuzzle","props","_this","possibleConstructorReturn","getPrototypeOf","call","randomResults","score","state","player","freezeBoard","cont","attempts","end","move","setState","event","_event$target$dataset","target","dataset","split","_event$target$dataset2","slicedToArray","cellEmpty","getCell","corrects","announcement","_this2","msg","final_msg","react_default","createElement","className","onClick","reset","bind","grid","cells","clickHandler","classString","coords","playerMove","key","data-cell","dangerouslySetInnerHTML","class","React","Component","ReactDOM","render","src_BaseChangePuzzle","singlePlayer","document","getElementById"],"mappings":"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","file":"static/js/main.c14600fe.chunk.js","sourcesContent":["'use strict';\n\nclass Board {\n  constructor(width, htmlOfNums, correctPlaces) {\n    if (typeof width !== 'number') {\n      throw new Error('Width must be a number');\n    }\n\n    if (width < 3 || width > 10) {\n      throw new Error('Width cannot be less than 3 or greater than 10');\n    }\n\n    // Initialize all the neccesary stuff\n    this.htmlForSquares = [];\n    this.BEST_POSSIBLE = correctPlaces.length;\n    this.correct = 0;\n    this.board = [];\n    this.guesses = [];\n\n    console.log(\"correct: \" + correctPlaces);\n\n    for (let i = 0; i < width; i++) {\n      let board_row = [];\n      let guesses_row = [];\n      let htmlForSquares_row = [];\n      for (let j = 0; j < width; j++) {\n        var found = false;\n        for(var n = 0; n < correctPlaces.length; n++) {\n          if(correctPlaces[n] == i * width + j) {\n            found = true;\n            board_row.push(1);\n            break;\n          }\n        }\n        if(!found) {\n          board_row.push(0);\n        }\n        guesses_row.push(0);\n        htmlForSquares_row.push(htmlOfNums[i*width + j]);\n      }\n      this.board.push(board_row);\n      this.guesses.push(guesses_row);\n      this.htmlForSquares.push(htmlForSquares_row);\n    }\n  }\n\n  // Return the board width.\n  getDim() {\n    return this.board.length;\n  }\n\n  // Return the value of a given cell.\n  getCell(x, y) {\n    return this.guesses[x][y];\n  }\n\n  // Assign a cell on the board to a given player.\n  move(x, y) {\n    this.guesses[x][y] = 1;\n    return this.checkCont(x, y);\n  }\n\n  // Return the coordinates of all empty cells.\n  getEmptyCells() {\n    return this.guess.map((row, rowInd) => {\n      return row.map((cell, cellInd) => {\n        if (cell === 0) {\n          return [rowInd, cellInd];\n        }\n      });\n    }).reduce((a, b) => {\n      return a.concat(b);\n    }).filter((cell) => {\n      return typeof cell !== 'undefined';\n    });\n  }\n\n  // Check if all values in an array are equal.\n  static allEqual(arr) {\n    return !arr.some((val, i, arr) => {\n      return val !== arr[0];\n    });\n  }\n\n  // Check if the game has been won.\n  // Returns player number, 3 in the case of a tie, or false if no winner.\n  checkCont(x, y) {\n    // Check if this was a proper guess\n    if(this.board[x][y] === 1) {\n      this.correct += 1;\n      console.log(\"corect: \" + this.correct);\n      // Check if have found all of the guesses\n      if(this.correct === this.BEST_POSSIBLE) {\n        return 1;\n      }\n    } // Return -1 if it was a wrong guess.\n    else {\n      return -1;\n    }\n    // Else just keep going as usual\n    return 0;\n  }\n}\n\nexport default Board;\n","export function genrandom(){\n\n                var base1=Math.floor(Math.random()*16+2);\n                var base2=Math.floor(Math.random()*16+2);\n                var num1=Math.floor(Math.random()*base1*2+1);\n                var num2=Math.floor(Math.random()*base2*2+1);\n                var answer;\n                var op2;\n\n                var operation=Math.floor(Math.random()*3);\n\n                if(operation==0){\n                        answer = num1+num2;\n                        op2=\"+\";\n                }\n                else if(operation==1){\n                        answer = num1-num2;\n                        op2=\"-\";\n                }\n                else{\n                        op2=\"*\";\n                        answer=num1*num2;\n                }\n\n                var disp1=num1.toString(base1);\n                var disp2=num2.toString(base2);\n\n                var x = [2,3,4,5,6,7,8,9,10,11,12,13,14,15];\n\n                var fourRandomMembers = getRandomSubarray(x, 4);\n                var fiveRandomMembers = getRandomSubarray(x, 4);\n\n                var position=[0,1,2,3,4,5,6,7,8]\n                var correct = getRandomSubarray(position, 4);\n\n                var a=[' ',' ',' ',' ',' ',' ',' ',' ',' '];\n\n                for(var i=0;i<4;i++){\n                        a[correct[i]]=createAnswer2(gensols(answer,fourRandomMembers[i]),fourRandomMembers[i].toString());\n                }\n                for(var j=0;j<9;j++){\n                        if(a[j]==' '){\n                         a[j]=createAnswer2(genwsols(answer,fourRandomMembers[i/4]),fourRandomMembers[i/4].toString());\n                        }\n                }\n\n                // Putting the answer together\n                var title = [disp1, base1, op2, disp2, base2];\n                var result = [];\n                result.push(a);\n                result.push(correct);\n                result.push(title);\n                return result;\n        }\n\nfunction gensols(answer,base){\n            return answer.toString(base);\n        }\n        function genwsols(answer,base){\n            return (answer+Math.floor(Math.random()*5+1)).toString(base);\n        }\n\n        function convert(num1, base1, num2, base2, operation){\n                if(operation==\"+\"){\n                        return parseInt(num1,base1)+parseInt(num2,base2);\n                }\n                else if (operation ==\"-\"){\n                        return parseInt(num1,base1)-parseInt(num2,base2);\n\n                }\n                else if(operation ==\"*\"){\n                        return parseInt(num1,base1)*parseInt(num2,base2);\n\n                }\n        }\n\n\nfunction getRandomSubarray(arr, size) {\n            var shuffled = arr.slice(0), i = arr.length, temp, index;\n            while (i--) {\n            index = Math.floor((i + 1) * Math.random());\n            temp = shuffled[index];\n            shuffled[index] = shuffled[i];\n            shuffled[i] = temp;\n            }\n        return shuffled.slice(0, size);\n}\n\nfunction createAnswer2(num1,num2) {\n  return {__html: num1+'<sub>'+num2+'</sub>'};\n}\n\nexport function createAnswer(title) {\n  return {__html: title[0]+'<sub>'+title[1]+'</sub>'+title[2]+title[3]+'<sub>'+title[4]};\n}\n","import React from 'react';\nimport Board from './board';\nimport {genrandom, createAnswer} from './generate.js';\n\nclass BaseChangePuzzle extends React.Component {\n\n  'use strict';\n\n  constructor(props) {\n    super(props);\n    // Getting random numbers\n    var randomResults = genrandom();\n    var htmlOfNums = randomResults[0];\n    var correctPlaces = randomResults[1];\n    this.title = randomResults[2];\n\n    // Setting up the game\n    this.score = 0;\n    this.board = new Board(props.width, htmlOfNums, correctPlaces);\n    this.state = {player: 1, freezeBoard: false, cont: 0, attempts: 0};\n  }\n\n  nextPlayer() {\n    return this.state.player === 1 ? 2 : 1;\n  }\n\n  // Place a move on the board and check for a winner.\n  move(x, y) {\n    let end = this.board.move(x, y);\n    this.setState({attempts: this.state.attempts+1})\n    if (end == 1 || end == -1) {\n      this.setState({cont: end, freezeBoard: true});\n    }\n  }\n\n  // Handle a player's move, and switch to the next player.\n  playerMove(event) {\n    const [ x, y ] = event.target.dataset.cell.split('_');\n    const cellEmpty = this.board.getCell(x, y) === 0;\n\n    console.log(\"Player tried to move\\n\" + \"cellEmpty: \" + cellEmpty);\n\n    if (cellEmpty) {\n      this.move(x, y);\n    }\n  }\n\n  reset() {\n    // Getting results fromm genrandom\n    var randomResults = genrandom();\n    var htmlOfNums = randomResults[0];\n    var corrects = randomResults[1];\n    this.title = randomResults[2];\n\n    // Setting up the new board\n    this.board = new Board(this.props.width, htmlOfNums, corrects);\n    this.setState({player: 1, freezeBoard: false, cont: 0});\n  }\n\n  render() {\n    const guesses = this.board.guesses ;\n    const board = this.board.board;\n    let announcement;\n\n    if (this.state.cont === 1 || this.state.cont === -1) {\n      const msg = this.state.cont == 1 ? 'You got\\'em all!' : 'That was wrong :(';\n      const final_msg = this.state.cont == 1? '' : 'Your final score is: ' + this.score;\n      this.score = this.state.cont === 1 ? this.score + 1 : 0;\n      announcement = (\n        <div className=\"announcement\">\n          <p>{ msg }</p>\n          <p>{ final_msg }</p>\n          <button onClick={ this.reset.bind(this) }>Reset</button>\n        </div>\n      );\n    }\n\n    console.log(guesses);\n\n    const grid = guesses.map((row, rowInd) => {\n        console.log(\"row: \" + row + \" rowInd: \" + rowInd);\n        const cells = row.map((cell, cellInd) => {\n          //console.log(\"cell: \" + guesses[rowInd][cellInd])\n          const classString = guesses[rowInd][cellInd] === 1 ? board[rowInd][cellInd] === 1 ? 'cell-p1' : 'cell-p2' : 'cell';\n          const coords = `${rowInd}_${cellInd}`;\n          let clickHandler;\n\n          if (!this.state.freezeBoard) { clickHandler = this.playerMove.bind(this); }\n\n          return <div className={ classString } key={ cellInd } onClick={ clickHandler } data-cell={ coords } dangerouslySetInnerHTML={this.board.htmlForSquares[rowInd][cellInd]}></div>;\n        });\n\n        return <div className=\"row\" key={ rowInd }>{ cells }</div>;\n      });\n\n      console.log(grid[0][0]);\n\n\n    return (\n      <div>\n        <div class=\"title\"> Which are equivalent to ... </div>\n        <div class=\"question\" dangerouslySetInnerHTML={createAnswer(this.title)}></div>\n        <div className=\"grid\">\n          { grid }\n          { announcement }\n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default BaseChangePuzzle;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport BaseChangePuzzle from './BaseChangePuzzle'\n\nReactDOM.render(<BaseChangePuzzle width = { 3 } singlePlayer />, document.getElementById('root'))\n\n\n"],"sourceRoot":""}